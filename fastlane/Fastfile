# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"],
        use_bundle_exec: false
      )
    end
  end

  desc "deploy ios"
  lane :release do
    # add actions here: https://docs.fastlane.tools/actions
    setup_ci if ENV['CI']

    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_KEY_ISSUER_ID'],
      key_content: ENV['APPLE_KEY_CONTENT'],
      in_house: false # optional but may be required if using match/sigh
    )

    # update_code_signing_settings
    update_code_signing_settings(
      use_automatic_signing: false,
      path: ENV["PROJECT_PATH"],
      team_id: ENV["TEAM_ID"],
      bundle_identifier: ENV["IOS_APP_ID"],
      code_sign_identity: "iPhone Distribution",
      profile_name: "match AdHoc #{ENV['IOS_APP_ID']}",
    )

    match(
      git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
      type: ENV['MATCH_TYPE'], # can be appstore, adhoc, development, enterprise, developer_id, mac_installer_distribution, developer_id_installer
      readonly: false,
      force_for_new_devices: true, # match will check if the (enabled) device count has changed since the last time you ran match, and automatically re-generate the provisioning profile if necessary
      api_key: api_key
    )

    # build number
    if ENV['INCREMENT_BUILD_NUMBER'] == 'true'
      increment_build_number(
        build_number: (latest_testflight_build_number(
          api_key: api_key,
        ) + 1).to_s,
      )
    end

    use_workspace = !ENV['WORKSPACE_PATH'].empty?
    build_app(
      workspace: use_workspace ? ENV['WORKSPACE_PATH'] : nil,
      project: !use_workspace ? ENV['PROJECT_PATH'] : nil,
      configuration: ENV['CONFIGURATION'],
      scheme: ENV['SCHEME'],
      output_directory: File.dirname(ENV['OUTPUT_PATH']),
      output_name: File.basename(ENV['OUTPUT_PATH']),
      clean: true,
      silent: true,
      xcargs: "-allowProvisioningUpdates",
      export_method: ENV['EXPORT_METHOD'],
      export_team_id: ENV['TEAM_ID'],
      #export_options: ENV['IOS_APP_ID'] != nil ? {
      #  provisioningProfiles: {
      #    "#{ENV['IOS_APP_ID']}" => "match AdHoc #{ENV['IOS_APP_ID']}",
      #  },
      #} : nil
    )
  end
end
